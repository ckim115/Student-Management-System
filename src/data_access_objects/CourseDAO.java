package data_access_objects;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import data_structures.Course;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

public class CourseDAO {
	// An instance of Connection for accessing the database
	private Connection conn = MySQLConnection.getConnection();
	
	public Course createCourseRecord(String course_name, String instructor, String semester) {
		int id = -1;
		String sql = String.format("INSERT INTO Courses "
				+ "(course_name, instructor, semester) "
				+ "VALUES ('%s', '%s', '%s');", course_name, instructor, semester);
		
		try {
			Statement stmt = conn.createStatement();
            int rowsAffected = stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);

            // If a record was inserted, retrieve the autogenerated courseID
            if (rowsAffected > 0) {
                ResultSet generatedKeys = stmt.getGeneratedKeys();
                if (generatedKeys.next()) {
                    id = generatedKeys.getInt(1);  // Set the id to the autogenerated courseID
                    System.out.println("Course record created with ID: " + id);
                }
            }
            return new Course(id, course_name, instructor, semester);
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	public void deleteCourseRecord(int id) {
		String sql = String.format("DELETE FROM Courses "
				+ " WHERE courseID = %d;", id);
		
		try {
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
			System.out.println("Course record deleted.");
			stmt.close();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	public void updateCourseRecord(int id, String course_name, String instructor, String semester) {
	    // Use String.format() correctly, ensuring %s for string parameters and %d for the ID
	    String sql = String.format("UPDATE Courses "
	            + "SET course_name = '%s', instructor = '%s', semester = '%s' "
	            + "WHERE courseID = %d;", course_name, instructor, semester, id);
	    
	    try {
	        Statement stmt = conn.createStatement();
	        stmt.executeUpdate(sql);
	        stmt.close();
	    }
	    catch (SQLException e) {
	        e.printStackTrace();
	    }
	}
	
	/**
	 * @param cols		The columns we are searching for in the database (such as courseID)
	 * @param cond		The conditions (such as "course_name = 'Math', instructor = 'Smith'")
	 */
	public List<Course> searchCourseRecord(String cols, String cond) {
	    List<Course> results = new ArrayList<>();
	    String sql = String.format("SELECT %s FROM Courses", cols);
	    if (!cond.isEmpty()) {
	        sql += " WHERE " + cond;
	    }

	    // Debugging output
	    System.out.println(sql);

	    String lowerCols = cols.toLowerCase().replaceAll("\\s+", "");
	    boolean hasCourseID = lowerCols.contains("courseid") || lowerCols.equals("*");
	    boolean hasCourseName = lowerCols.contains("course_name") || lowerCols.equals("*");
	    boolean hasInstructor = lowerCols.contains("instructor") || lowerCols.equals("*");
	    boolean hasSemester = lowerCols.contains("semester") || lowerCols.equals("*");

	    try {
	        Statement stmt = conn.createStatement();
	        ResultSet rs = stmt.executeQuery(sql);

	        while (rs.next()) {
	            int id = hasCourseID ? rs.getInt("courseID") : -1;
	            String courseName = hasCourseName ? rs.getString("course_name") : null;
	            String instructor = hasInstructor ? rs.getString("instructor") : null;
	            String semester = hasSemester ? rs.getString("semester") : null;

	            Course course = new Course(id, courseName, instructor, semester);
	            results.add(course);
	        }

	        rs.close();
	        stmt.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }

	    return results;
	}

	public static ObservableList<Course> fetchAllCourses() {
	    ObservableList<Course> courseList = FXCollections.observableArrayList();
	    String sql = "SELECT * FROM Courses"; // Update this table name if needed

	    try (Connection conn = MySQLConnection.getConnection();
	         Statement stmt = conn.createStatement();
	         ResultSet rs = stmt.executeQuery(sql)) {

	        while (rs.next()) {
	        	int id = rs.getInt("courseID");
	            String courseName = rs.getString("course_name");
	            String instructor = rs.getString("instructor");
	            String semester = rs.getString("semester");

	            Course course = new Course(id, courseName, instructor, semester);
	            courseList.add(course);
	        }

	    } catch (SQLException e) {
	        e.printStackTrace();
	    }

	    return courseList;
	}
}
