package data_access_objects;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import data_structures.Student;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/**
 * The Data Access Object for the StudentController class
 */
public class StudentDAO {
	/** An instance of Connection for accessing the database*/
	private Connection conn = MySQLConnection.getConnection();

	/**
	 * Creates a new student record in the database
	 * @param fname		the first name of the student
	 * @param lname		the last name of the student
	 * @param date		the date enrolled
	 * @return			the Student containing the information in the record
	 */
	public Student createStudentRecord(String fname, String lname, String date) {
		int id = -1;
		String sql = String.format("INSERT INTO Students "
				+ "(first_name, last_name, birthdate) "
				+ "VALUES ('%s', '%s', '%s');", fname, lname, date);
		
		try {
			Statement stmt = conn.createStatement();
			
			int rowsAffected = stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);

	        // If a record was inserted, retrieve the autogenerated courseID
	        if (rowsAffected > 0) {
	            ResultSet generatedKeys = stmt.getGeneratedKeys();
	            if (generatedKeys.next()) {
	                id = generatedKeys.getInt(1);  // Set the id to the autogenerated courseID
	                System.out.println("Course record created with ID: " + id);
	            }
	        }
	        
	        return new Student(id, fname, lname, date);
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	/**
	 * Deletes the student record by a specified id
	 * @param id	unique id of the student record
	 */
	public void deleteStudentRecord(int id) {
		String sql = String.format("DELETE FROM Students "
				+ " WHERE studentID = %d;", id);
		
		try {
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
			System.out.println("Student record deleted.");
			stmt.close();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	/**
	 * Update an existing grade record by a specified id
	 * @param id			unique id of the student record
	 * @param fname		the first name of the student
	 * @param lname		the last name of the student
	 * @param date		the date enrolled
	 */
	public void updateStudentRecord(int id, String fname, String lname, String date) {
		String sql = String.format("UPDATE Students "
				+ " SET first_name = '%s', last_name = '%s', birthdate = '%s'"
				+ " WHERE studentID = %d;", fname, lname, date, id);
		
		try {
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
			System.out.println("Student record updated.");
			stmt.close();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Returns a list of student records meeting a given criteria
	 * @param cols		The columns we are searching for in the database (such as "courseID, course_name")
	 * @param cond		The conditions (such as "course_name = 'Math', instructor = 'Smith'")
	 * @return			the list of Student objects meeting the criteria
	 */
	public List<Student> searchStudentRecord(String cols, String cond) {
	    List<Student> results = new ArrayList<>();
	    String sql = String.format("SELECT %s FROM Students", cols);
	    if (!cond.isEmpty()) {
	        sql += " WHERE " + cond;
	    }

	    // Debugging output
	    System.out.println(sql);

	    String lowerCols = cols.toLowerCase().replaceAll("\\s+", "");
	    boolean hasStudentID = lowerCols.contains("studentid") || lowerCols.equals("*");
	    boolean hasFirstName = lowerCols.contains("first_name") || lowerCols.equals("*");
	    boolean hasLastName = lowerCols.contains("last_name") || lowerCols.equals("*");
	    boolean hasBirthdate = lowerCols.contains("birthdate") || lowerCols.equals("*");

	    try {
	        Statement stmt = conn.createStatement();
	        ResultSet rs = stmt.executeQuery(sql);

	        while (rs.next()) {
	            int id = hasStudentID ? rs.getInt("studentID") : -1;
	            String first = hasFirstName ? rs.getString("first_name") : null;
	            String last = hasLastName ? rs.getString("last_name") : null;
	            String birth = hasBirthdate ? rs.getString("birthdate") : null;

	            Student student = new Student(id, first, last, birth);
	            results.add(student);
	        }

	        rs.close();
	        stmt.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }

	    return results;
	}

	/**
	 * Fetch all the grades in the Student table
	 * @return	the list of Student objects
	 */
	public static ObservableList<Student> fetchAllStudents() {
	    ObservableList<Student> studentList = FXCollections.observableArrayList();
	    String sql = "SELECT * FROM Students"; // Update this table name if needed

	    try (Connection conn = MySQLConnection.getConnection();
	         Statement stmt = conn.createStatement();
	         ResultSet rs = stmt.executeQuery(sql)) {

	        while (rs.next()) {
	        	int id = rs.getInt("studentID");
	            String first = rs.getString("first_name");
	            String last = rs.getString("last_name");
	            String birth = rs.getString("birthdate");

	            Student student = new Student(id, first, last, birth);
	            studentList.add(student);
	        }

	    } catch (SQLException e) {
	        e.printStackTrace();
	    }

	    return studentList;
	}
}
